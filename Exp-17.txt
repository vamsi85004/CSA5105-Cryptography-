#include <stdio.h>
#include <stdint.h>
#include <string.h>
const int PC1[56] = {
    57,49,41,33,25,17,9,
    1,58,50,42,34,26,18,
    10,2,59,51,43,35,27,
    19,11,3,60,52,44,36,
    63,55,47,39,31,23,15,
    7,62,54,46,38,30,22,
    14,6,61,53,45,37,29,
    21,13,5,28,20,12,4
};
const int PC2[48] = {
    14,17,11,24,1,5,
    3,28,15,6,21,10,
    23,19,12,4,26,8,
    16,7,27,20,13,2,
    41,52,31,37,47,55,
    30,40,51,45,33,48,
    44,49,39,56,34,53,
    46,42,50,36,29,32
};
const int shift_schedule[16] = {
    1, 1, 2, 2,
    2, 2, 2, 2,
    1, 2, 2, 2,
    2, 2, 2, 1
};
void left_shift(uint8_t *half, int shifts) {
    uint32_t temp = 0;
    for(int i = 0; i < 28; i++) {
        temp <<= 1;
        temp |= half[i];
    }
    temp = ((temp << shifts) | (temp >> (28 - shifts))) & 0x0FFFFFFF;
    for(int i = 27; i >= 0; i--) {
        half[i] = temp & 1;
        temp >>= 1;
    }
}
void generate_subkeys(uint8_t *key, uint8_t subkeys[16][48]) {
    uint8_t permuted_key[56];
    uint8_t C[28], D[28];
    for(int i = 0; i < 56; i++) {
        permuted_key[i] = key[PC1[i] - 1];
    }
    memcpy(C, permuted_key, 28);
    memcpy(D, permuted_key + 28, 28);
    for(int round = 0; round < 16; round++) {
        left_shift(C, shift_schedule[round]);
        left_shift(D, shift_schedule[round]);
        uint8_t CD[56];
        memcpy(CD, C, 28);
        memcpy(CD + 28, D, 28);
        for(int i = 0; i < 48; i++) {
            subkeys[round][i] = CD[PC2[i] - 1];
        }
    }
}
void feistel(uint8_t *R, uint8_t *subkey, uint8_t *output) {
}
void des_decrypt(uint8_t *ciphertext, uint8_t *key, uint8_t *plaintext) {
    uint8_t subkeys[16][48];
    generate_subkeys(key, subkeys);
    uint8_t L[32], R[32];
    memcpy(L, ciphertext, 32);
    memcpy(R, ciphertext + 32, 32);
    for(int round = 15; round >= 0; round--) {
        uint8_t previous_L[32];
        memcpy(previous_L, L, 32);
        uint8_t f_output[32];
        feistel(R, subkeys[round], f_output);
        for(int i = 0; i < 32; i++) {
            L[i] = R[i];
            R[i] = previous_L[i] ^ f_output[i];
        }
    }
    uint8_t preoutput[64];
    memcpy(preoutput, R, 32);
    memcpy(preoutput + 32, L, 32);
    memcpy(plaintext, preoutput, 64);
}
int main() {
    uint8_t ciphertext[64] = { /* 64-bit ciphertext */ };
    uint8_t key[64] = { /* 64-bit key */ };
    uint8_t plaintext[64];

    des_decrypt(ciphertext, key, plaintext);
    for(int i = 0; i < 64; i++) {
        printf("%d", plaintext[i]);
    }
    printf("\n");
    return 0;
}
