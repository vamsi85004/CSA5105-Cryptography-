#include <stdio.h>
#include <stdint.h>
#include <string.h>
#define BLOCK_SIZE 8


void xor_blocks(uint8_t *block1, uint8_t *block2, uint8_t *result) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        result[i] = block1[i] ^ block2[i];
    }
}


void encrypt_block(uint8_t *block, uint8_t *key, uint8_t *result) {
    
    xor_blocks(block, key, result);
}


void decrypt_block(uint8_t *block, uint8_t *key, uint8_t *result) {
    
    xor_blocks(block, key, result);
}


void ecb_encrypt(uint8_t *message, int message_len, uint8_t *key, uint8_t *ciphertext) {
    for (int i = 0; i < message_len; i += BLOCK_SIZE) {
        encrypt_block(message + i, key, ciphertext + i);
    }
}


void cbc_encrypt(uint8_t *message, int message_len, uint8_t *key, uint8_t *iv, uint8_t *ciphertext) {
    uint8_t block[BLOCK_SIZE];
    memcpy(block, iv, BLOCK_SIZE);

    for (int i = 0; i < message_len; i += BLOCK_SIZE) {
        xor_blocks(block, message + i, block);
        encrypt_block(block, key, ciphertext + i);
        memcpy(block, ciphertext + i, BLOCK_SIZE);
    }
}


void cbc_decrypt(uint8_t *ciphertext, int message_len, uint8_t *key, uint8_t *iv, uint8_t *plaintext) {
    uint8_t block[BLOCK_SIZE];
    uint8_t decrypted_block[BLOCK_SIZE];
    memcpy(block, iv, BLOCK_SIZE);

    for (int i = 0; i < message_len; i += BLOCK_SIZE) {
        decrypt_block(ciphertext + i, key, decrypted_block);
        xor_blocks(block, decrypted_block, plaintext + i);
        memcpy(block, ciphertext + i, BLOCK_SIZE);
    }
}

int main() {
    uint8_t key[BLOCK_SIZE] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
    uint8_t iv[BLOCK_SIZE] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};

    uint8_t message[] = "Hello, World!";
    int message_len = strlen((char *)message);
    if (message_len % BLOCK_SIZE != 0) {
        message_len = (message_len / BLOCK_SIZE + 1) * BLOCK_SIZE;
    }

    uint8_t ciphertext[message_len];
    cbc_encrypt(message, message_len, key, iv, ciphertext);

    
    ciphertext[0] ^= 0x01;

    uint8_t plaintext[message_len];
    cbc_decrypt(ciphertext, message_len, key, iv, plaintext);

    printf("Decrypted plaintext: ");
    for (int i = 0; i < message_len; i++) {
        printf("%c", plaintext[i]);
    }
    printf("\n");
    return 0;
}
