#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <math.h>
#define ALPHABET_SIZE 26
#define MAX_PLAINTEXTS 10
double frequencies[] = {
    0.08167, 0.01492, 0.02782, 0.04253, 0.12702, 0.02228, 0.02015,
    0.06094, 0.06966, 0.00153, 0.00772, 0.04025, 0.02406, 0.06749,
    0.07507, 0.01929, 0.00095, 0.05987, 0.06327, 0.09056, 0.02758,
    0.00978, 0.02360, 0.00150, 0.01974, 0.00074
};
double calculate_score(char *text) {
    double score = 0;
    int counts[ALPHABET_SIZE] = {0};
    int length = strlen(text);

    for (int i = 0; i < length; i++) {
        if (isalpha(text[i])) {
            counts[tolower(text[i]) - 'a']++;
        }
    }

    for (int i = 0; i < ALPHABET_SIZE; i++) {
        double frequency = (double)counts[i] / length;
        score += frequency * frequencies[i];
    }

    return score;
}
void decrypt(char *ciphertext, int shift, char *plaintext) {
    int length = strlen(ciphertext);
    for (int i = 0; i < length; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            plaintext[i] = ((ciphertext[i] - base - shift + ALPHABET_SIZE) % ALPHABET_SIZE) + base;
        } else {
            plaintext[i] = ciphertext[i];
        }
    }
    plaintext[length] = '\0';
}
int main() {
    char ciphertext[] = "your ciphertext here";
    double scores[ALPHABET_SIZE];
    char plaintexts[ALPHABET_SIZE][100];

    for (int shift = 0; shift < ALPHABET_SIZE; shift++) {
        decrypt(ciphertext, shift, plaintexts[shift]);
        scores[shift] = calculate_score(plaintexts[shift]);
    }
    printf("Top %d possible plaintexts:\n", MAX_PLAINTEXTS);
    for (int i = 0; i < MAX_PLAINTEXTS; i++) {
        int max_index = 0;
        double max_score = scores[0];
        for (int j = 1; j < ALPHABET_SIZE; j++) {
            if (scores[j] > max_score) {
                max_index = j;
                max_score = scores[j];
            }
        }
        printf("%d. %s (score: %f, shift: %d)\n", i + 1, plaintexts[max_index], max_score, max_index);
        scores[max_index] = -1;
    }
    return 0;
}

